@page "/"

<style>
    .my-align-center input {
        text-align: center;
    }
</style>

<div class="ma-8">
    <div class="d-flex flex-column align-center">
        <div class="d-flex flex-column align-center" style="width: fit-content">
            <div style="width: 100%">
                <MudAutocomplete Class="ma-2 my-align-center" T="string" Label="Distanz in Meter" @bind-Value="this.InputDistance" SearchFunc="@(this.DistanceSearch)"
                                 Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" CoerceValue="true" CoerceText="true"/>
            </div>
            <div class="d-flex flex-row">
                <MudTextField Class="ma-2 my-align-center" Immediate="true" @bind-Value="this.InputTimeMinutes" Label="Minuten" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudTextField Class="ma-2 my-align-center" Immediate="true" @bind-Value="this.InputTimeSeconds" Label="Sekunden" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </div>
            <div class="d-flex flex-column align-center mt-8">
                <MudText Typo="Typo.subtitle2" Color="Color.Error">@this.OutputInfoText</MudText>
                
                @if (this.OutputCalculation.Count > 0)
                {
                    <MudSimpleTable Elevation="0" Hover="true" Dense="true" FixedHeader="true">
                        <thead>
                        <tr>
                            <th><MudText Class="mud-typography-align-right" Typo="Typo.subtitle2">Distanz</MudText></th>
                            <th><MudText Class="mud-typography-align-left" Typo="Typo.subtitle2">Zeit</MudText></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in this.OutputCalculation)
                        {
                            <tr>
                                <td><MudText Class="mud-typography-align-right" Typo="Typo.body1">@($"{item.Item1} m:")</MudText></td>
                                <td><MudText Class="mud-typography-align-left" Typo="Typo.body1">@($"{(item.Item2.Hours > 0 ? $"{item.Item2.Hours}h:" : "")}{item.Item2.Minutes}m:{item.Item2.Seconds.ToString("D2")}s")</MudText></td>
                            </tr>
                        }
                        </tbody>
                    </MudSimpleTable>
                }
            </div>
        </div>
    </div>
</div>

@code
{
    protected override Task OnInitializedAsync()
    {
        this.UpdateOutput();
        return Task.CompletedTask;
    }

    private string inputDistance = "1000";

    public string InputDistance
    {
        get => this.inputDistance;

        set
        {
            if (this.inputDistance == value)
            {
                return;
            }

            this.inputDistance = value;
            this.UpdateOutput();
        }
    }

    private string inputTimeMinutes = "4";

    public string InputTimeMinutes
    {
        get => this.inputTimeMinutes;

        set
        {
            if (this.inputTimeMinutes == value)
            {
                return;
            }

            this.inputTimeMinutes = value;
            this.UpdateOutput();
        }
    }

    private string inputTimeSeconds = "0";

    public string InputTimeSeconds
    {
        get => this.inputTimeSeconds;

        set
        {
            if (this.inputTimeSeconds == value)
            {
                return;
            }

            this.inputTimeSeconds = value;
            this.UpdateOutput();
        }
    }

    public string OutputInfoText { get; set; }

    public HashSet<(decimal, TimeSpan)> OutputCalculation { get; set; } = new();

    private async Task<IEnumerable<string>> DistanceSearch(string arg)
    {
        await Task.Delay(0);
        var all = new[] { "1500", "1000", "800", arg }.ToHashSet();
    // return all.Where(x => x.ToLowerInvariant().Contains(arg)).ToList();
        return all;
    }

    public void UpdateOutput()
    {
        this.OutputInfoText = string.Empty;
        this.OutputCalculation = new();

        if (!decimal.TryParse(this.InputDistance, out var distance) || distance < 100)
        {
            this.OutputInfoText = "Fehlerhafte Zahleneingabe im 'Distanz'-Feld";
            return;
        }

        if (!decimal.TryParse(this.InputTimeMinutes, out var minutes) || minutes < 0)
        {
            this.OutputInfoText = "Fehlerhafte Zahleneingabe im 'Minuten'-Feld";
            return;
        }

        if (!decimal.TryParse(this.InputTimeSeconds, out var seconds) || seconds < 0)
        {
            this.OutputInfoText = "Fehlerhafte Zahleneingabe im 'Sekunden'-Feld";
            return;
        }

        var time = TimeSpan.FromMinutes((double)minutes).Add(TimeSpan.FromSeconds((double)seconds));

        if (time.TotalSeconds <= 0)
        {
            this.OutputInfoText = "Gesamtzeit muss größer als 0 sein";
            return;
        }

        var distanceParts = new HashSet<(decimal, TimeSpan)>();
        var secondsPerMeter = (decimal)time.TotalSeconds / distance;
        decimal tmp = 100;

        while (tmp <= distance)
        {
            distanceParts.Add((tmp, TimeSpan.FromSeconds((double)(tmp * secondsPerMeter))));
            tmp += 100;
        }

        distanceParts.Add((distance, time));

        this.OutputCalculation = distanceParts;
    }
}